// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: fileStorage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileStorage_LogIn_FullMethodName    = "/file_storage.FileStorage/LogIn"
	FileStorage_Reg_FullMethodName      = "/file_storage.FileStorage/Reg"
	FileStorage_GetFiles_FullMethodName = "/file_storage.FileStorage/GetFiles"
	FileStorage_PostFile_FullMethodName = "/file_storage.FileStorage/PostFile"
	FileStorage_GetFile_FullMethodName  = "/file_storage.FileStorage/GetFile"
)

// FileStorageClient is the client API for FileStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageClient interface {
	LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error)
	Reg(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegResponse, error)
	GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFilesResponse], error)
	PostFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PostFileRequest, PostFileResponse], error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error)
}

type fileStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageClient(cc grpc.ClientConnInterface) FileStorageClient {
	return &fileStorageClient{cc}
}

func (c *fileStorageClient) LogIn(ctx context.Context, in *LogInRequest, opts ...grpc.CallOption) (*LogInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogInResponse)
	err := c.cc.Invoke(ctx, FileStorage_LogIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageClient) Reg(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegResponse)
	err := c.cc.Invoke(ctx, FileStorage_Reg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileStorageClient) GetFiles(ctx context.Context, in *GetFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFilesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileStorage_ServiceDesc.Streams[0], FileStorage_GetFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFilesRequest, GetFilesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_GetFilesClient = grpc.ServerStreamingClient[GetFilesResponse]

func (c *fileStorageClient) PostFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PostFileRequest, PostFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileStorage_ServiceDesc.Streams[1], FileStorage_PostFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PostFileRequest, PostFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_PostFileClient = grpc.ClientStreamingClient[PostFileRequest, PostFileResponse]

func (c *fileStorageClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileStorage_ServiceDesc.Streams[2], FileStorage_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileRequest, GetFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_GetFileClient = grpc.ServerStreamingClient[GetFileResponse]

// FileStorageServer is the server API for FileStorage service.
// All implementations must embed UnimplementedFileStorageServer
// for forward compatibility.
type FileStorageServer interface {
	LogIn(context.Context, *LogInRequest) (*LogInResponse, error)
	Reg(context.Context, *RegRequest) (*RegResponse, error)
	GetFiles(*GetFilesRequest, grpc.ServerStreamingServer[GetFilesResponse]) error
	PostFile(grpc.ClientStreamingServer[PostFileRequest, PostFileResponse]) error
	GetFile(*GetFileRequest, grpc.ServerStreamingServer[GetFileResponse]) error
	mustEmbedUnimplementedFileStorageServer()
}

// UnimplementedFileStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileStorageServer struct{}

func (UnimplementedFileStorageServer) LogIn(context.Context, *LogInRequest) (*LogInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedFileStorageServer) Reg(context.Context, *RegRequest) (*RegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reg not implemented")
}
func (UnimplementedFileStorageServer) GetFiles(*GetFilesRequest, grpc.ServerStreamingServer[GetFilesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFileStorageServer) PostFile(grpc.ClientStreamingServer[PostFileRequest, PostFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PostFile not implemented")
}
func (UnimplementedFileStorageServer) GetFile(*GetFileRequest, grpc.ServerStreamingServer[GetFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileStorageServer) mustEmbedUnimplementedFileStorageServer() {}
func (UnimplementedFileStorageServer) testEmbeddedByValue()                     {}

// UnsafeFileStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServer will
// result in compilation errors.
type UnsafeFileStorageServer interface {
	mustEmbedUnimplementedFileStorageServer()
}

func RegisterFileStorageServer(s grpc.ServiceRegistrar, srv FileStorageServer) {
	// If the following call pancis, it indicates UnimplementedFileStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileStorage_ServiceDesc, srv)
}

func _FileStorage_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStorage_LogIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServer).LogIn(ctx, req.(*LogInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorage_Reg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServer).Reg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStorage_Reg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServer).Reg(ctx, req.(*RegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileStorage_GetFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileStorageServer).GetFiles(m, &grpc.GenericServerStream[GetFilesRequest, GetFilesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_GetFilesServer = grpc.ServerStreamingServer[GetFilesResponse]

func _FileStorage_PostFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStorageServer).PostFile(&grpc.GenericServerStream[PostFileRequest, PostFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_PostFileServer = grpc.ClientStreamingServer[PostFileRequest, PostFileResponse]

func _FileStorage_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileStorageServer).GetFile(m, &grpc.GenericServerStream[GetFileRequest, GetFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStorage_GetFileServer = grpc.ServerStreamingServer[GetFileResponse]

// FileStorage_ServiceDesc is the grpc.ServiceDesc for FileStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_storage.FileStorage",
	HandlerType: (*FileStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogIn",
			Handler:    _FileStorage_LogIn_Handler,
		},
		{
			MethodName: "Reg",
			Handler:    _FileStorage_Reg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFiles",
			Handler:       _FileStorage_GetFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostFile",
			Handler:       _FileStorage_PostFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FileStorage_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fileStorage.proto",
}
